
user nginx nginx;

worker_processes 1;

error_log /var/log/nginx/error.log info;

pid        /var/run/nginx.pid;

events {

#    debug_connection 127.0.0.1;

    worker_connections 1024;

    use epoll;
}   

http {

    charset UTF-8;

    include /etc/nginx/mime.types;
	
    default_type application/octet-stream;

	log_format main
		'$remote_addr - $remote_user [$time_local] '
		'"$request" $status $bytes_sent '
		'"$http_referer" "$http_user_agent" '
		'"$gzip_ratio"';

	client_header_timeout 10m;
	client_body_timeout 10m;
	send_timeout 10m;

	connection_pool_size 256;
	client_header_buffer_size 1k;
	large_client_header_buffers 4 2k;
	request_pool_size 4k;

	gzip off;

	output_buffers 4 32k;
	postpone_output 1460;

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;

	keepalive_timeout 63 20;

    server_names_hash_max_size 1024;
    server_names_hash_bucket_size 64;
    types_hash_max_size 2048;

	ignore_invalid_headers on;

	index index.html index.htm ;

    error_page  404              /404.html;

    error_page  500 502 503 504  /50x.html;


    server {

        listen 80;

        server_name example.com;

# Temporary redirect to an individual page
# rewrite ^/oldpage$ http://www.domain.com/newpage redirect;

        proxy_set_header  Host $host;
        proxy_set_header  X-Real-IP $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Host $server_name;
        proxy_set_header  Client-IP $remote_addr;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        }

	server {

		listen 443 default_server;

		server_name _ ;

    # managed by Certbot
    #listen [::]:443 ssl http2; 
    #listen 443 ssl http2; 
    #ssl_certificate /etc/letsencrypt/live/test-cells.io/fullchain.pem; 
    #ssl_certificate_key /etc/letsencrypt/live/test-cells.io/privkey.pem; 
    #include /etc/letsencrypt/options-ssl-nginx.conf; 
    #ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; 


		}

	server {

		listen 80 default_server;

		server_name _ ;

        #return 301 https://$host$request_uri


        location /geoserver {
            proxy_pass http://localhost:88/geoserver ;
            }

        location /geonode {
            proxy_pass http://localhost:88 ;
            }

		}


   include /etc/nginx/conf.d/*.conf;

}

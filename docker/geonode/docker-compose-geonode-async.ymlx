version: '2.2'

services:

  db:
    build: ./build
    dockerfile: Dockerfile_postgis
    image: db2${COMPOSE_PROJECT_NAME}:local
    container_name: db4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: db
        org.geonode.instance.name: geonode
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    env_file:
      - ./env/${SET_DOCKER_ENV}/db.env
      - ./env/${SET_DOCKER_ENV}/overwrite.env

  elasticsearch:
    build: ./build
    dockerfile: Dockerfile_elasticsearch
    image: elasticsearch2${COMPOSE_PROJECT_NAME}:local
    container_name: elasticsearch4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: elasticsearch
        org.geonode.instance.name: geonode
    volumes:
      - elasticdata:/usr/share/elasticsearch/data

  rabbitmq:
    build: ./build
    image: rabbitmq2${COMPOSE_PROJECT_NAME}:local
    container_name: rabbitmq4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    stdin_open: true
    tty: true
    labels:
        org.geonode.component: rabbitmq
        org.geonode.instance.name: geonode
    volumes:
      - rabbitmq:/var/lib/rabbitmq

  celery:
    build: ./build
    image: celery2${COMPOSE_PROJECT_NAME}:local
    container_name: celery4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: celery
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - elasticsearch
      - rabbitmq
    # command: celery worker --app=geonode.celery_app:app -B -l INFO
    volumes:
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data
    env_file:
      - ./env/${SET_DOCKER_ENV}/celery.env
      - ./env/${SET_DOCKER_ENV}/overwrite.env

  geoserver:
    build: ./build
    image: geoserver4geoserver:local
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: geoserver
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - elasticsearch
      - rabbitmq
      - data-dir-conf
    volumes:
      - geoserver-data-dir:/geoserver_data/data
    env_file:
      - ./env/${SET_DOCKER_ENV}/geoserver.env
      - ./env/${SET_DOCKER_ENV}/overwrite.env

  django:
    build: ./build
    image: djando2${COMPOSE_PROJECT_NAME}:local
    container_name: django4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: django
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - elasticsearch
      - rabbitmq
      - data-dir-conf
    # command: paver start_django -b 0.0.0.0:8000
    # command: uwsgi --ini uwsgi.ini
    volumes:
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data
    env_file:
      - ./env/${SET_DOCKER_ENV}/django.env
      - ./env/${SET_DOCKER_ENV}/overwrite.env

  geonode:
    build: ./build
    image: nginx2${COMPOSE_PROJECT_NAME}:local
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: nginx
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - django
      - celery
      - geoserver
    ports:
      - "80:80"
    volumes:
      - statics:/mnt/volumes/statics

  data-dir-conf:
    build: ./build
    image: datadir2${COMPOSE_PROJECT_NAME}:local
    container_name: gsconf4${COMPOSE_PROJECT_NAME}
    restart: on-failure
    labels:
        org.geonode.component: conf
        org.geonode.instance.name: geonode
    command: /bin/true
    volumes:
      - geoserver-data-dir:/geoserver_data/data

volumes:
  statics:
    name: ${COMPOSE_PROJECT_NAME}_statics
  geoserver-data-dir:
    name: ${COMPOSE_PROJECT_NAME}_gsdatadir
  dbdata:
    name: ${COMPOSE_PROJECT_NAME}_dbdata
  dbbackups:
    name: ${COMPOSE_PROJECT_NAME}_dbbackups
  rabbitmq:
    name: ${COMPOSE_PROJECT_NAME}_rabbitmq
  elasticdata:  
    name: ${COMPOSE_PROJECT_NAME}_elasticsearch
